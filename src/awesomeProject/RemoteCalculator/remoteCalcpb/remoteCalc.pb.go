// Code generated by protoc-gen-go. DO NOT EDIT.
// source: remoteCalc.proto

package remoteCalcpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the integer number
type Akeraios struct {
	First                int32    `protobuf:"varint,1,opt,name=First,proto3" json:"First,omitempty"`
	Second               int32    `protobuf:"varint,2,opt,name=Second,proto3" json:"Second,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Akeraios) Reset()         { *m = Akeraios{} }
func (m *Akeraios) String() string { return proto.CompactTextString(m) }
func (*Akeraios) ProtoMessage()    {}
func (*Akeraios) Descriptor() ([]byte, []int) {
	return fileDescriptor_5af124be6957d82f, []int{0}
}

func (m *Akeraios) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Akeraios.Unmarshal(m, b)
}
func (m *Akeraios) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Akeraios.Marshal(b, m, deterministic)
}
func (m *Akeraios) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Akeraios.Merge(m, src)
}
func (m *Akeraios) XXX_Size() int {
	return xxx_messageInfo_Akeraios.Size(m)
}
func (m *Akeraios) XXX_DiscardUnknown() {
	xxx_messageInfo_Akeraios.DiscardUnknown(m)
}

var xxx_messageInfo_Akeraios proto.InternalMessageInfo

func (m *Akeraios) GetFirst() int32 {
	if m != nil {
		return m.First
	}
	return 0
}

func (m *Akeraios) GetSecond() int32 {
	if m != nil {
		return m.Second
	}
	return 0
}

// The request message containing the operation to be made
type Operation struct {
	Operator             string    `protobuf:"bytes,1,opt,name=Operator,proto3" json:"Operator,omitempty"`
	Numbers              *Akeraios `protobuf:"bytes,2,opt,name=Numbers,proto3" json:"Numbers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Operation) Reset()         { *m = Operation{} }
func (m *Operation) String() string { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()    {}
func (*Operation) Descriptor() ([]byte, []int) {
	return fileDescriptor_5af124be6957d82f, []int{1}
}

func (m *Operation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Operation.Unmarshal(m, b)
}
func (m *Operation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Operation.Marshal(b, m, deterministic)
}
func (m *Operation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation.Merge(m, src)
}
func (m *Operation) XXX_Size() int {
	return xxx_messageInfo_Operation.Size(m)
}
func (m *Operation) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation.DiscardUnknown(m)
}

var xxx_messageInfo_Operation proto.InternalMessageInfo

func (m *Operation) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *Operation) GetNumbers() *Akeraios {
	if m != nil {
		return m.Numbers
	}
	return nil
}

// The response message containing the result of the operation
type Outcome struct {
	Result               int32    `protobuf:"varint,1,opt,name=Result,proto3" json:"Result,omitempty"`
	Remainder            int32    `protobuf:"varint,2,opt,name=Remainder,proto3" json:"Remainder,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Outcome) Reset()         { *m = Outcome{} }
func (m *Outcome) String() string { return proto.CompactTextString(m) }
func (*Outcome) ProtoMessage()    {}
func (*Outcome) Descriptor() ([]byte, []int) {
	return fileDescriptor_5af124be6957d82f, []int{2}
}

func (m *Outcome) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Outcome.Unmarshal(m, b)
}
func (m *Outcome) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Outcome.Marshal(b, m, deterministic)
}
func (m *Outcome) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Outcome.Merge(m, src)
}
func (m *Outcome) XXX_Size() int {
	return xxx_messageInfo_Outcome.Size(m)
}
func (m *Outcome) XXX_DiscardUnknown() {
	xxx_messageInfo_Outcome.DiscardUnknown(m)
}

var xxx_messageInfo_Outcome proto.InternalMessageInfo

func (m *Outcome) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *Outcome) GetRemainder() int32 {
	if m != nil {
		return m.Remainder
	}
	return 0
}

func init() {
	proto.RegisterType((*Akeraios)(nil), "RemoteCalculator.Akeraios")
	proto.RegisterType((*Operation)(nil), "RemoteCalculator.Operation")
	proto.RegisterType((*Outcome)(nil), "RemoteCalculator.Outcome")
}

func init() { proto.RegisterFile("remoteCalc.proto", fileDescriptor_5af124be6957d82f) }

var fileDescriptor_5af124be6957d82f = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x3d, 0x4b, 0xc4, 0x40,
	0x10, 0x86, 0x8d, 0x70, 0x1f, 0x19, 0x45, 0x8e, 0x41, 0xf4, 0x8c, 0x16, 0x92, 0xca, 0x2a, 0xc8,
	0x69, 0x61, 0x27, 0x2a, 0xd8, 0x79, 0x07, 0x2b, 0x36, 0x82, 0xc5, 0x26, 0x37, 0x45, 0x30, 0xc9,
	0x84, 0xd9, 0x4d, 0xe1, 0xef, 0xf2, 0x0f, 0x8a, 0x49, 0x76, 0x17, 0xd4, 0xca, 0xf2, 0x79, 0x67,
	0xe7, 0xdd, 0x07, 0x06, 0x16, 0x42, 0x35, 0x5b, 0x7a, 0xd0, 0x55, 0x91, 0xb5, 0xc2, 0x96, 0x71,
	0xa1, 0x7c, 0xd2, 0x55, 0xda, 0xb2, 0xa4, 0x37, 0x30, 0xbf, 0x7b, 0x27, 0xd1, 0x25, 0x1b, 0x3c,
	0x84, 0xc9, 0x63, 0x29, 0xc6, 0x2e, 0xa3, 0xf3, 0xe8, 0x62, 0xa2, 0x06, 0xc0, 0x23, 0x98, 0x3e,
	0x53, 0xc1, 0xcd, 0x76, 0xb9, 0xdb, 0xc7, 0x23, 0xa5, 0x6f, 0x10, 0x6f, 0x5a, 0x12, 0x6d, 0x4b,
	0x6e, 0x30, 0x81, 0xf9, 0x00, 0x2c, 0xfd, 0x76, 0xac, 0x3c, 0xe3, 0x35, 0xcc, 0xd6, 0x5d, 0x9d,
	0x93, 0x98, 0xbe, 0x61, 0x6f, 0x95, 0x64, 0x3f, 0x35, 0x32, 0xe7, 0xa0, 0xdc, 0xd3, 0xf4, 0x16,
	0x66, 0x9b, 0xce, 0x16, 0x5c, 0xd3, 0xb7, 0x81, 0x22, 0xd3, 0x55, 0x4e, 0x6c, 0x24, 0x3c, 0x83,
	0x58, 0x51, 0xad, 0xcb, 0x66, 0x4b, 0x32, 0xca, 0x85, 0x60, 0xf5, 0x19, 0x01, 0x84, 0x1f, 0x70,
	0x0d, 0xe8, 0x88, 0x82, 0xf7, 0xe9, 0x6f, 0x15, 0x3f, 0x4c, 0x4e, 0xfe, 0x18, 0x0e, 0x4a, 0xe9,
	0x0e, 0xbe, 0xc0, 0xb1, 0xef, 0x7b, 0xd2, 0xcd, 0x87, 0x5f, 0x33, 0xff, 0x2f, 0xbd, 0x8c, 0xee,
	0x0f, 0x5e, 0xf7, 0xc3, 0xd5, 0xda, 0x3c, 0x9f, 0xf6, 0x87, 0xbb, 0xfa, 0x0a, 0x00, 0x00, 0xff,
	0xff, 0xef, 0x3d, 0x9a, 0xa7, 0xcc, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalculatorClient is the client API for Calculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculatorClient interface {
	// Calculates the operation of two integers
	// Unary
	CalculateOperation(ctx context.Context, in *Operation, opts ...grpc.CallOption) (*Outcome, error)
	// Server - to - Client streaming RPC
	CalculateManyOperations(ctx context.Context, in *Operation, opts ...grpc.CallOption) (Calculator_CalculateManyOperationsClient, error)
}

type calculatorClient struct {
	cc *grpc.ClientConn
}

func NewCalculatorClient(cc *grpc.ClientConn) CalculatorClient {
	return &calculatorClient{cc}
}

func (c *calculatorClient) CalculateOperation(ctx context.Context, in *Operation, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, "/RemoteCalculator.Calculator/CalculateOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) CalculateManyOperations(ctx context.Context, in *Operation, opts ...grpc.CallOption) (Calculator_CalculateManyOperationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Calculator_serviceDesc.Streams[0], "/RemoteCalculator.Calculator/CalculateManyOperations", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorCalculateManyOperationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Calculator_CalculateManyOperationsClient interface {
	Recv() (*Outcome, error)
	grpc.ClientStream
}

type calculatorCalculateManyOperationsClient struct {
	grpc.ClientStream
}

func (x *calculatorCalculateManyOperationsClient) Recv() (*Outcome, error) {
	m := new(Outcome)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorServer is the server API for Calculator service.
type CalculatorServer interface {
	// Calculates the operation of two integers
	// Unary
	CalculateOperation(context.Context, *Operation) (*Outcome, error)
	// Server - to - Client streaming RPC
	CalculateManyOperations(*Operation, Calculator_CalculateManyOperationsServer) error
}

func RegisterCalculatorServer(s *grpc.Server, srv CalculatorServer) {
	s.RegisterService(&_Calculator_serviceDesc, srv)
}

func _Calculator_CalculateOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Operation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).CalculateOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RemoteCalculator.Calculator/CalculateOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).CalculateOperation(ctx, req.(*Operation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_CalculateManyOperations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Operation)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculatorServer).CalculateManyOperations(m, &calculatorCalculateManyOperationsServer{stream})
}

type Calculator_CalculateManyOperationsServer interface {
	Send(*Outcome) error
	grpc.ServerStream
}

type calculatorCalculateManyOperationsServer struct {
	grpc.ServerStream
}

func (x *calculatorCalculateManyOperationsServer) Send(m *Outcome) error {
	return x.ServerStream.SendMsg(m)
}

var _Calculator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RemoteCalculator.Calculator",
	HandlerType: (*CalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateOperation",
			Handler:    _Calculator_CalculateOperation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CalculateManyOperations",
			Handler:       _Calculator_CalculateManyOperations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "remoteCalc.proto",
}
